package classes;

import java.util.HashMap;
import java.util.List;

import classes.MyLanguageParser.*;

public class MyVisitor <T> extends MyLanguageBaseVisitor<T> {
	HashMap<HashMap, String[]> table = new HashMap<>();
	//HashMap<String, Object> variable = new HashMap<>();
	
	public Object define(String type, Object obj){
		switch(type){
			case "string":
				if (obj==null){
					return "";
				}else{
					return obj.toString();
				}
			case "double":
				if (obj==null){
					return 0.0;
				}else{
					return (Double) obj;
				}
			case "single":
				if (obj==null){
					return 0.0;
				}else{
					return (Double) obj;
				}
			case "long":
				if (obj==null){
					return 0;
				}else{
					return (Long) obj;
				}
			case "integer":
				if (obj==null){
					return 0;
				}else{
					return (Integer) obj;
				}
		}
		return null;
	}
	
	@Override
	public T visitQb64 (MyLanguageParser.Qb64Context ctx) {
	    List<MyLanguageParser.InstrContext> instruction = ctx.instr();
	    //List<MyLanguageParser.FunctionsubContext> functionSub = ctx.functionsub();

	    //for (MyLanguageParser.FunctionsubContext f : functionSub)
	    //    visit(f);

	    for (MyLanguageParser.InstrContext i : instruction)
	        visit(i);

	    return null;
	}
	
	@Override
	public T visitInstr(MyLanguageParser.InstrContext ctx) {
		return visitChildren(ctx);
	}
	
	@Override
	public T visitDecl(MyLanguageParser.DeclContext ctx) {
		return visitChildren(ctx);
	}
	
	@Override
	public T visitDim(MyLanguageParser.DimContext ctx){
		String[] myTypeArray = new String[2];
		String typeVar="variable";
		if(ctx.shared()!=null){
			typeVar="global";
		}
		myTypeArray[0]=typeVar;
		String valType= new String(ctx.TYPE().getText());
		System.out.print(valType);
		myTypeArray[1]=valType;
		visitIdim(ctx.idim(), myTypeArray);
		return null;
	}

	public T visitIdim(MyLanguageParser.IdimContext ctx, String[]typeVar) {
		String name = ctx.ID().getText();
		HashMap<String, Object> variable = new HashMap<>();
		Object vari=define(typeVar[0],null);
		System.out.println(vari);
		
		return null;
	}
	/*
	 * 
	 * Print Methods
	 * 
	 */
	public T visitPrint(MyLanguageParser.PrintContext ctx) {
		Object Result= visitToprintfst(ctx.toprintfst());
		System.out.println(Result);
		return null;
	}
	
	@Override
	public T visitToprintfst(MyLanguageParser.ToprintfstContext ctx){
		String printTo="";
		if (ctx.expr()!=null){
			printTo=visitExpr(ctx.expr()).toString()+" ";
		}
		return null;
	}
	/*
	 * 
	 * Expr Methods
	 * 
	 */
	public T visitExpr(MyLanguageParser.ExprContext ctx) {
		
		return null;
	}
	
}
