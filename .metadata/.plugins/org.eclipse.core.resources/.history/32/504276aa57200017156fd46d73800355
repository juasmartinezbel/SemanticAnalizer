package classes;

import java.util.HashMap;
import java.util.List;

import classes.MyLanguageParser.*;

public class MyVisitor <T> extends MyLanguageBaseVisitor<T> {
	HashMap<HashMap, String[]> table = new HashMap<>();
	//HashMap<String, Object> variable = new HashMap<>();
	
	public Object define(String type, Object obj){
		switch(type){
			case "string":
				if (obj==null){
					return "";
				}else{
					return obj.toString();
				}
			case "double":
				if (obj==null){
					return 0.0;
				}else{
					return (Double) obj;
				}
			case "single":
				if (obj==null){
					return 0.0;
				}else{
					return (Double) obj;
				}
			case "long":
				if (obj==null){
					return 0;
				}else{
					return (Long) obj;
				}
			case "integer":
				if (obj==null){
					return 0;
				}else{
					return (Integer) obj;
				}
		}
		return null;
	}
	
	@Override
	public T visitQb64 (MyLanguageParser.Qb64Context ctx) {
	    List<MyLanguageParser.InstrContext> instruction = ctx.instr();
	    //List<MyLanguageParser.FunctionsubContext> functionSub = ctx.functionsub();

	    //for (MyLanguageParser.FunctionsubContext f : functionSub)
	    //    visit(f);

	    for (MyLanguageParser.InstrContext i : instruction)
	        visit(i);

	    return null;
	}
	
	@Override
	public T visitInstr(MyLanguageParser.InstrContext ctx) {
		return visitChildren(ctx);
	}
	
	@Override
	public T visitDecl(MyLanguageParser.DeclContext ctx) {
		return visitChildren(ctx);
	}
	
	@Override
	public T visitDim(MyLanguageParser.DimContext ctx){
		String[] myTypeArray = new String[2];
		String typeVar="variable";
		if(ctx.shared()!=null){
			typeVar="global";
		}
		myTypeArray[0]=typeVar;
		String valType= new String(ctx.TYPE().getText());
		System.out.print(valType);
		myTypeArray[1]=valType;
		visitIdim(ctx.idim(), myTypeArray);
		return null;
	}

	public T visitIdim(MyLanguageParser.IdimContext ctx, String[]typeVar) {
		String name = ctx.ID().getText();
		HashMap<String, Object> variable = new HashMap<>();
		Object vari=define(typeVar[0],null);
		System.out.println(vari);
		
		return null;
	}
	/*
	 * 
	 * Print Methods
	 * 
	 */
	public T visitPrint(MyLanguageParser.PrintContext ctx) {
		String Result= visitToprintfst(ctx.toprintfst()).toString();
		System.out.println(Result);
		return null;
	}
	
	@Override
	public T visitToprintfst(MyLanguageParser.ToprintfstContext ctx){
		String printTo="";
		if (ctx.expr()!=null){
			printTo+=visitExpr(ctx.expr(), null).toString()+" ";
		}
		
	    List<MyLanguageParser.ToprintContext> ToPrint = ctx.toprint();
	    //List<MyLanguageParser.FunctionsubContext> functionSub = ctx.functionsub();

	    //for (MyLanguageParser.FunctionsubContext f : functionSub)
	    //    visit(f);

	    for (MyLanguageParser.ToprintContext i : ToPrint){
			printTo+=visitToprint(i).toString()+" ";
	    }
		return (T) printTo;
	}
	
	@Override
	public T visitToprint(MyLanguageParser.ToprintContext ctx){
		return visitExpr(ctx.expr(), null);
	}
	/*
	 * 
	 * Methods for expressions
	 * 
	 */
	public T visitExpr(MyLanguageParser.ExprContext ctx, String Error) {
		// ()
		if (ctx.PIZQ()!=null && ctx.PDER()!=null){
			return visitExpr(ctx.expr(0), null);
			
		// not y -	
		}else if (ctx.neg()!=null){
			Object ne=ctx.neg().getText().toString();
			Object arch=visitExpr(ctx.expr(0), null);
			String ty=TypeOf(arch);
			if (ty.equals("string")){
				String [] should={"double", "integer", "long", "single"};
				Error=error_types("string", should);
				visitExpr(ctx.expr(0), Error);
			}else{	
				if (ne.equals("not")){
					if(ty.equals("double") || ty.equals("integer") || ty.equals("float")){
						int notArch= (int) arch;
						Integer notU = ~notArch;
						return (T) notU;
					}else if (ty.equals("long")){
						long notArch= (long) arch;
						Long notU = ~notArch;
						return (T) notU;
					}
				}else if(ne.equals("-")){
					if(ty.equals("double")){
						double notArch= (double) arch;
						Double notU = -notArch;
						return (T) notU;
					}else if (ty.equals("long")){
						long notArch= (long) arch;
						Long notU = -notArch;
						return (T) notU;
					}else if (ty.equals("integer")){
						int notArch= (int) arch;
						Integer notU = -notArch;
						return (T) notU;
					}else if (ty.equals("float")){
						float notArch= (float) arch;
						Float notU = -notArch;
						return (T) notU;
					}
				}
			}
		// ^		
		}else if(ctx.POT()!=null){
			Object i=visitExpr(ctx.expr(0), null);
			Object j=visitExpr(ctx.expr(1), null);	
			String ti=TypeOf(i);
			String tj=TypeOf(j);
			if (ti.equals("string")||tj.equals("string")){
				String [] should={"double", "integer", "long", "single"};
				Error=error_types("string", should);
				if (ti.equals("string"))
					visitExpr(ctx.expr(0), Error);
				else if(tj.equals("string"))
					visitExpr(ctx.expr(1), Error);
			}else{

			}
		}
		return null;
	}
	public Object operand(Object num1, Object num2){
		String t1=TypeOf(num1);
		String t2=TypeOf(num2);
		if(t1.equals("double")){
			double nNum1= (double) num1;
		}else if (t1.equals("long")){
			long nNum1= (long) num1;
		}else if (t1.equals("integer")){
			int nNum1= (int) num1;
		}else{
			float nNum1= (float) num1;
		}
		
		if(t2.equals("double")){
			double nNum2= (double) num2;
		}else if (t2.equals("long")){
			long nNum2= (long) num2;
		}else if (t2.equals("integer")){
			int nNum2= (int) num2;
		}else{
			float nNum2= (float) num2;
		}
		
		if (t1.equals("double")||t2.equals("double")){
			Double cnum1= (double) nNum1;
			Double cnum2= (double) nNum2;
		}else if(t1.equals("float")||t2.equals("float")){
			Float cnum1 = (float) i;
			Float cnum2 = (float) j;
		}else if (t1.equals("long")||t2.equals("long")){
			Long cnum1= (long) i;
			Long cnum2= (long) j;
		}
		return null;
	}
	
	public Object returnNumValue(){
		return null;
	}
	public String TypeOf (Object T){
		if(T instanceof String){
			return "string";
		}else if(T instanceof Integer){
			return "integer";
		}else if(T instanceof Double){
			return "double";
		}else if (T instanceof Float){
			return "float";
		}else{
			return "long";
		}
	}
	public String error_types(String found, String[] should){
		String Error="Error semantico: tipos de datos incompatibles. Se esperaba:";
		for (int i = 0; i < should.length; i++) {
			Error+=" "+should[0];
			if ((i+1)>should.length)
				Error+=",";
		}
		Error=(Error+";se encontro: "+found+".\n");
		return Error;
	}

}
